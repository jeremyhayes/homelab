version: '3.8'

services:

  postgres:
    image: postgres:16.5-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
    secrets:
      - postgres-su-password
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-su-password
      - POSTGRES_DB=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    deploy:
      placement:
        constraints:
          - node.role == manager # for mapped data volume
          - node.platform.arch == x86_64
      labels:
        - traefik.enable=false

  # TODO pgAdmin

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    secrets:
      - postgres-su-password
    environment:
      - DATA_SOURCE_URI=postgres?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS_FILE=/run/secrets/postgres-su-password
    deploy:
      placement:
        constraints:
          - node.platform.arch == aarch64
      labels:
        - prometheus.swarm.enable=true
        - prometheus.swarm.port=9187

  postgres-backup:
    image: postgres:16.5-alpine
    entrypoint: "sh -c"
    command: |
      '
      TIMESTAMP=$$(date +"%Y-%m-%d_%H-%M-%S")
      OUTFILE="/opt/backups/pgdumpall_$$TIMESTAMP.sql.gz"
      export PGPASSWORD=$$(cat $$POSTGRES_PASSWORD_FILE)
      pg_dumpall -h postgres -U $$POSTGRES_USER | gzip > "$$OUTFILE"
      '
    volumes:
      - postgres-backups:/opt/backups
    secrets:
      - postgres-su-password
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-su-password
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.platform.arch == x86_64
      restart_policy:
        condition: none
      replicas: 0 # managed by cron
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=0 5 * * mon

secrets:
  postgres-su-password:
    file: ./.secret.postgres-su-password

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "/opt/apps/postgres/data"
  postgres-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "/opt/apps/postgres/backups"
