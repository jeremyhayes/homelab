version: '3.8'

services:

  jellyfin:
    image: jellyfin/jellyfin:10.10.3
    ports:
      - target: 1920  # service discovery and dlna
        published: 1920
        protocol: udp
        mode: host
      - target: 7359  # client discovery
        published: 7359
        protocol: udp
        mode: host
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      - jellyfin-media:/media
      - jellyfin-media2:/media2
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.lab.omglolwtfbbq.com
      - TZ=America/New_York
    deploy:
      placement:
        constraints:
          - node.platform.arch == x86_64
      labels:
        # set EnableMetrics in Jellyfin's config/system.xml
        - prometheus.swarm.enable=true
        - prometheus.swarm.port=8096
        - traefik.enable=true
        - traefik.http.routers.jellyfin.rule=Host(`jellyfin.lab.omglolwtfbbq.com`)
        - traefik.http.routers.jellyfin.entrypoints=web-secure
        - traefik.http.routers.jellyfin.tls.certResolver=primary
        - traefik.http.routers.jellyfin.tls.domains[0].main=*.lab.omglolwtfbbq.com
        - traefik.http.routers.jellyfin.service=jellyfin
        - traefik.http.services.jellyfin.loadbalancer.server.port=8096
        - traefik.http.routers.jellyfin-refresh.rule=Host(`jellyfin.lab.omglolwtfbbq.com`) && Path(`/Library/Refresh`)
        - traefik.http.routers.jellyfin-refresh.entrypoints=web
        - traefik.http.routers.jellyfin-refresh.service=jellyfin-refresh
        - traefik.http.services.jellyfin-refresh.loadbalancer.server.port=8096

  jellyfin-backup:
    image: docker:27.3.1-cli-alpine3.20
    entrypoint: "sh -c"
    command: |
      '
      TIMESTAMP=$$(date +"%Y-%m-%d_%H-%M-%S")
      OUTFILE="/opt/backups/config_$$TIMESTAMP.tar.gz"

      echo "Stopping jellyfin service..."
      docker service scale $$SERVICE_NAME=0 > /dev/null

      echo "Backing up jellyfin config to '$$OUTFILE'..."
      tar -cpzf "$$OUTFILE" -C /opt/config .

      echo "Deleting backups older than 30 days..."
      find /opt/backups -name "config_*.tar.gz" -type -f -mtime +30 -print -delete

      echo "Starting jellyfin service..."
      docker service scale $$SERVICE_NAME=1 > /dev/null
      '
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - jellyfin-config:/opt/config
      - jellyfin-backups:/opt/backups
    environment:
      # assumes this is deployed to a stack named "lab"
      - SERVICE_NAME=lab_jellyfin
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
      replicas: 0 # none by default; created when cron hits
      labels:
        # backup and restart Tuesdays at 3am
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=0 3 * * TUE

volumes:
  jellyfin-config:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/apps/jellyfin/config'
  jellyfin-cache:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/apps/jellyfin/cache'
  jellyfin-backups:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/opt/apps/jellyfin/backups'
  jellyfin-media:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/nas/media'
  jellyfin-media2:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/nas2/media'
